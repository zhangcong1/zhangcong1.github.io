{
    "version": "https://jsonfeed.org/version/1",
    "title": "不管给谁打工，都要为自己学东西～ • All posts by \"react\" category",
    "description": "zc个人博客",
    "home_page_url": "https://zhangcong1.github.io",
    "items": [
        {
            "id": "https://zhangcong1.github.io/web/React/ZCDesign/",
            "url": "https://zhangcong1.github.io/web/React/ZCDesign/",
            "title": "TypeScript笔记",
            "date_published": "2021-10-16T08:54:08.906Z",
            "content_html": "<h2 id=\"typescript\"><a class=\"markdownIt-Anchor\" href=\"#typescript\">#</a> TypeScript</h2>\n<h4 id=\"一-概念编程语言类型\"><a class=\"markdownIt-Anchor\" href=\"#一-概念编程语言类型\">#</a> 一、概念：编程语言类型</h4>\n<ul>\n<li>\n<p>动态类型语言</p>\n<p>在运行期间才会去做数据类型检查。不用指定变量类型。</p>\n</li>\n<li>\n<p>静态类型语言</p>\n<p>在编译时进行数据类型检查。</p>\n</li>\n</ul>\n<h4 id=\"为什么使用typescript\"><a class=\"markdownIt-Anchor\" href=\"#为什么使用typescript\">#</a> 为什么使用 TypeScript？</h4>\n<ol>\n<li>\n<p>程序更容易理解</p>\n<blockquote>\n<p>问题：函数或者方法输入输出的参数类型，外部条件等。</p>\n<p>动态语言的约束：需要手动调试等过程。</p>\n</blockquote>\n</li>\n<li>\n<p>效率更高</p>\n<blockquote>\n<p>在不同代码块和定义中进行跳转。</p>\n<p>代码自动补全</p>\n<p>丰富的接口提示</p>\n</blockquote>\n</li>\n<li>\n<p>更少的错误</p>\n<blockquote>\n<p>编译期间能够发现大部分错误</p>\n<p>杜绝一些比较常见的错误  例如 传入 0，布尔值判断为 false</p>\n</blockquote>\n</li>\n<li>\n<p>非常好的包容性</p>\n<blockquote>\n<p>完全兼容 JavaScript</p>\n<p>第三方库可以单独编写类型文件</p>\n<p>流行项目都支持 TypeScript - React，Vue，Ant Design</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"typescript安装\"><a class=\"markdownIt-Anchor\" href=\"#typescript安装\">#</a> TypeScript 安装</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br><span class=\"line\">tsc greeter.ts</span><br><span class=\"line\">tsc -w greeter.ts</span><br><span class=\"line\">npm install -g ts-node</span><br><span class=\"line\">ts-node greeter.ts</span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript数据类型和数据结构\"><a class=\"markdownIt-Anchor\" href=\"#javascript数据类型和数据结构\">#</a> JavaScript 数据类型和数据结构</h4>\n<p>7 种原始类型：Boolean，Null，Undefined，Number，BigInt，String，Symbol<br>\n 对象类型：Object</p>\n<h4 id=\"ts基础类型\"><a class=\"markdownIt-Anchor\" href=\"#ts基础类型\">#</a> TS 基础类型</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basic-types.ts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> isDone: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryNumber: number = <span class=\"number\">0b1111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName: string = <span class=\"string\">&#x27;zc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> message: string = <span class=\"string\">`hello, <span class=\"subst\">$&#123;firstName&#125;</span>, age is <span class=\"subst\">$&#123;age&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> numu: number = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numn: number = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> notSure: any = <span class=\"number\">4</span>; <span class=\"comment\">// 没有任何方法提示</span></span><br><span class=\"line\">notSure = <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>;</span><br><span class=\"line\">notSure.name;  <span class=\"comment\">//返回类型也为 any</span></span><br><span class=\"line\">notSure.getName()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOrstring: number | string = <span class=\"number\">123</span>;</span><br><span class=\"line\">numberOrstring = <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrOfNumbers: number[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arrOfNumbers.push(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 类数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//IArguments</span></span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// arguments.forEach(); // 类型“IArguments”上不存在属性“forEach”</span></span><br><span class=\"line\">  <span class=\"comment\">// let arr: any[] = arguments;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 元组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user: [string, number] = [<span class=\"string\">&#x27;zc&#x27;</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">user = [<span class=\"string\">&#x27;ZC&#x27;</span>, <span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"interface-接口\"><a class=\"markdownIt-Anchor\" href=\"#interface-接口\">#</a> Interface 接口</h4>\n<ul>\n<li>对对象的形状（shape）进行描述</li>\n<li>对类（class）进行抽象</li>\n<li>Duck Typing（鸭子类型）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IPerson &#123;</span><br><span class=\"line\">  readonly id: number;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">  gender?: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person: IPerson = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zc&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>readonly 是用在属性上，const 是用在变量上</p>\n</blockquote>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: number, y: number = <span class=\"number\">10</span>, z?: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2.函数表达式</span></span><br><span class=\"line\"><span class=\"comment\">// 类型推断 (x: number, y?: number, z?: number) =&gt; number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x: number, y: number = <span class=\"number\">10</span>, z?: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// let add2: number = add1;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2: <span class=\"function\">(<span class=\"params\">x: number, y?: number, z?: number</span>) =&gt;</span> number = add1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// str = 123;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"类-class\"><a class=\"markdownIt-Anchor\" href=\"#类-class\">#</a> 类 Class</h4>\n<ul>\n<li>类：定义了一切事物的抽象特点</li>\n<li>对象（Object）：类的实例</li>\n<li>面向对象三大特性：封装，继承，多态</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修饰符 public private protected</span></span><br><span class=\"line\"><span class=\"comment\">// static </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  public name: string;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> categories: string[] = [<span class=\"string\">&#x27;mammal&#x27;</span>, <span class=\"string\">&#x27;bird&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">isAnimal</span>(<span class=\"params\">a</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"keyword\">instanceof</span> Animal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name: string</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> is running`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> snack = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&#x27;zc&#x27;</span>);</span><br><span class=\"line\">snack.run();</span><br><span class=\"line\">snack.name = <span class=\"string\">&#x27;zczc&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Animal.isAnimal(snack))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bark</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> is barking`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&#x27;zc&#x27;</span>);</span><br><span class=\"line\">dog.run();</span><br><span class=\"line\">dog.bark();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`miao, <span class=\"subst\">$&#123;<span class=\"built_in\">super</span>.run()&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&#x27;zc&#x27;</span>);</span><br><span class=\"line\">cat.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"类和接口-implements\"><a class=\"markdownIt-Anchor\" href=\"#类和接口-implements\">#</a> 类和接口 implements</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IRadio &#123;</span><br><span class=\"line\">  switchRadio(triggerL?: boolean): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface IRadioWithBattery <span class=\"keyword\">extends</span> IRadio&#123;</span><br><span class=\"line\">  checkBatteryStatus()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"title\">implements</span> <span class=\"title\">IRadio</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">switchRadio</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CellPhone</span> <span class=\"title\">implements</span> <span class=\"title\">IRadioWithBattery</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">switchRadio</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">checkBatteryStatus</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 枚举  常量枚举</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> enum Direction &#123;</span><br><span class=\"line\">  Up = <span class=\"string\">&#x27;UP&#x27;</span>,</span><br><span class=\"line\">  Down = <span class=\"string\">&#x27;DOWN&#x27;</span>,</span><br><span class=\"line\">  Left = <span class=\"string\">&#x27;LEFT&#x27;</span>,</span><br><span class=\"line\">  Right = <span class=\"string\">&#x27;RIGHT&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Up)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h4>\n<blockquote>\n<p>泛型要解决什么问题？可以把泛型看成一个占位符，在使用时才动态的填入确定的类型值。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echo</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = echo(<span class=\"string\">&#x27;str&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = echo(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = echo(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>&gt;(<span class=\"params\">tuple: [T, U]</span>): [<span class=\"title\">U</span>, <span class=\"title\">T</span>]</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [tuple[<span class=\"number\">1</span>],tuple[<span class=\"number\">0</span>]]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result3 = swap([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure>\n<p>约束泛型  extends</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IWithLength &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echoWithLength</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">IWithLength</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg.length);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = echoWithLength(<span class=\"string\">&#x27;str&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = echoWithLength(&#123;<span class=\"attr\">length</span>: <span class=\"number\">10</span>, <span class=\"attr\">with</span>: <span class=\"number\">10</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrs2 = echoWithLength([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 除了函数中的泛型应用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  private data = [];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\">item: T</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.data.push(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop(): T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.data.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue&lt;number&gt;();</span><br><span class=\"line\">queue.push(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queue.pop().toFixed())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queue.pop().toFixed())</span><br><span class=\"line\"></span><br><span class=\"line\">interface KeyPair&lt;T, U&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: T;</span><br><span class=\"line\">  value: U;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kp1: KeyPair&lt;number, string&gt; = &#123;<span class=\"attr\">key</span>: <span class=\"number\">123</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;str&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kp2: KeyPair&lt;string, number&gt; = &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;123&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr: number[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2: <span class=\"built_in\">Array</span>&lt;number&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">interface IPlus&lt;T&gt; &#123;</span><br><span class=\"line\">  (a: T, <span class=\"attr\">b</span>: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">plus</span>(<span class=\"params\">a: number, b: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\">a: string, b: string</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a: IPlus&lt;number&gt; = plus;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b: IPlus&lt;string&gt; = connect;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型别名联合类型常用\"><a class=\"markdownIt-Anchor\" href=\"#类型别名联合类型常用\">#</a> 类型别名 (联合类型常用)</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type PlusType = <span class=\"function\">(<span class=\"params\">x: number, y: number</span>) =&gt;</span> number;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x: number, y: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sun1: PlusType = sum;</span><br><span class=\"line\"></span><br><span class=\"line\">type NameResolver = <span class=\"function\">() =&gt;</span> string;</span><br><span class=\"line\">type NameOrResolver = string | NameResolver;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\">n: NameOrResolver</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\">#</a> 类型断言</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLength</span>(<span class=\"params\">input: string | number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// const str = input as String;</span></span><br><span class=\"line\">  <span class=\"comment\">// if(str.length) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return str.length</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;else&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   const number = input as Number;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return number.toString().length;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>((&lt;string&gt;input).length)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;string&gt;input).length</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input.toString().length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"声明文件\"><a class=\"markdownIt-Anchor\" href=\"#声明文件\">#</a> 声明文件</h4>\n<p>.d.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"keyword\">var</span> jQuery: <span class=\"function\">(<span class=\"params\">selector: string</span>) =&gt;</span> any;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基础类型\n<ul>\n<li>boolean, number, string, number[], Array<number>, 元组 Tuple [string, number], enum Color {Red, Green, Blue}, any, null, undefined<br>\n 联合类型 number｜string</li>\n</ul>\n</li>\n<li>复杂类型</li>\n<li>接口 - Interface</li>\n<li>对对象的形状进行描述</li>\n<li>对类进行抽象</li>\n<li>Duck Typing</li>\n<li>类 - Class</li>\n<li>泛型 - Generics</li>\n<li>约束泛型 extends</li>\n<li>声明文件<br>\n类型别名 type<br>\n 类型断言 as</li>\n</ul>\n<h2 id=\"react\"><a class=\"markdownIt-Anchor\" href=\"#react\">#</a> React</h2>\n<ul>\n<li>useState</li>\n<li>useEffect</li>\n<li>自定义 Hook</li>\n<li>useRef</li>\n<li>useContext</li>\n</ul>\n<h2 id=\"组件测试\"><a class=\"markdownIt-Anchor\" href=\"#组件测试\">#</a> 组件测试</h2>\n<ul>\n<li>jest</li>\n<li>react-testing-libirary</li>\n<li>基础断言</li>\n<li>行为模拟</li>\n<li>mock 模拟</li>\n<li>mock 实现</li>\n</ul>\n<h2 id=\"项目启动\"><a class=\"markdownIt-Anchor\" href=\"#项目启动\">#</a> 项目启动</h2>\n<p>npx create-react-app zc-design --typescript</p>\n<p>npx：避免全局安装模块，调用项目内部安装的模块</p>\n<h2 id=\"新版-create-react-app-添加less环境配置\"><a class=\"markdownIt-Anchor\" href=\"#新版-create-react-app-添加less环境配置\">#</a> 新版 create-react-app 添加 less 环境配置</h2>\n<ol>\n<li>安装 less</li>\n</ol>\n<p>npm install less-loader less --save-dev<br>\n2. 查找 node_modules 下面的 react-scripts/config/webpack.config.js</p>\n<p>默认已经帮你配置了 sass 环境 (只要安装 sass 环境 npm install sass-loader node-sass --save-dev)</p>\n<p>const lessRegex = /.less/;\nconst lessModuleRegex = /\\.module\\.less/;</p>\n<h2 id=\"react-ts\"><a class=\"markdownIt-Anchor\" href=\"#react-ts\">#</a> react + ts</h2>\n<ul>\n<li>React.FunctionComponent&lt;P = {}&gt;</li>\n</ul>\n<h2 id=\"组件测试-2\"><a class=\"markdownIt-Anchor\" href=\"#组件测试-2\">#</a> 组件测试</h2>\n<p>测试的重要性：</p>\n<ul>\n<li>高质量的代码</li>\n<li>更早的发现 bug，减少成本</li>\n<li>让重构和升级变得更加容易和可靠</li>\n<li>让你的开发流程更加敏捷</li>\n</ul>\n<p>jest</p>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/React/React/",
            "url": "https://zhangcong1.github.io/web/React/React/",
            "title": "React笔记",
            "date_published": "2021-07-18T11:24:12.434Z",
            "content_html": "<p>yarn create react-app my-app --template typescript</p>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/React/umi/",
            "url": "https://zhangcong1.github.io/web/React/umi/",
            "title": "React笔记",
            "date_published": "2021-07-18T11:24:12.434Z",
            "content_html": "<h2 id=\"使用-umijs-搭建-react项目\"><a class=\"markdownIt-Anchor\" href=\"#使用-umijs-搭建-react项目\">#</a> 使用 UmiJs 搭建 React 项目</h2>\n<p>UmiJs 是一个可插拔的企业级 react 应用框架，集成 react，react-router，ant-design 等项目中常用的依赖包，可通过脚手架快速生成项目。</p>\n<h3 id=\"umijs-特点\"><a class=\"markdownIt-Anchor\" href=\"#umijs-特点\">#</a> UmiJs 特点</h3>\n<ul>\n<li>可扩展</li>\n<li>开箱即用 s</li>\n<li>企业级</li>\n<li>大量自研</li>\n<li>完备路由</li>\n<li>最新框架</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UmiJs2</span><br><span class=\"line\">yarn create umi</span><br><span class=\"line\">UmiJs3</span><br><span class=\"line\">yarn create @umijs/umi-app</span><br></pre></td></tr></table></figure>\n<p>.umirc.ts 文件：路由配置，插件配置<br>\n自动创建 page 及路由，动态路由 $id.js  [id].js</p>\n<p>![截屏 2021-11-19 22.34.01](/Users/zhangcong/Desktop/ 我的项目 / 博客 /hexo/source/_posts/web/React/UmiJs/ 截屏 2021-11-19 22.34.01.png)</p>\n<p>![截屏 2021-11-19 22.43.29](/Users/zhangcong/Desktop/ 我的项目 / 博客 /hexo/source/_posts/web/React/UmiJs/ 截屏 2021-11-19 22.43.29.png)</p>\n<h2 id=\"dva\"><a class=\"markdownIt-Anchor\" href=\"#dva\">#</a> Dva</h2>\n<p>models 文件夹<br>\n state  reducers 同步  effects 异步</p>\n<h2 id=\"react-hooks\"><a class=\"markdownIt-Anchor\" href=\"#react-hooks\">#</a> React Hooks</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(()=&gt;&#123;&#125;, 可选值)</span><br><span class=\"line\">// 不传，每次都会触发</span><br><span class=\"line\">// 传 [] ,只会初始化执行一次</span><br><span class=\"line\">// 传 [value] , value值改变触发</span><br><span class=\"line\">useLayoutEffect  所有dom渲染完成后才同步执行effect，通常用来做dom相关操作</span><br><span class=\"line\">useMemo 缓存 只要state不改变就不会重新渲染</span><br><span class=\"line\">useCallback 函数缓存</span><br><span class=\"line\"></span><br><span class=\"line\">useContext</span><br><span class=\"line\">useReducer</span><br></pre></td></tr></table></figure>",
            "tags": [
                "React"
            ]
        }
    ]
}