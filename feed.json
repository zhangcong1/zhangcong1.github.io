{
    "version": "https://jsonfeed.org/version/1",
    "title": "不管给谁打工，都要为自己学东西～",
    "description": "zc个人博客",
    "home_page_url": "https://zhangcong1.github.io",
    "items": [
        {
            "id": "https://zhangcong1.github.io/web/React/ZCDesign/",
            "url": "https://zhangcong1.github.io/web/React/ZCDesign/",
            "title": "",
            "date_published": "2021-10-16T08:54:08.906Z",
            "content_html": "<h2 id=\"typescript\"><a class=\"markdownIt-Anchor\" href=\"#typescript\">#</a> TypeScript</h2>\n<h4 id=\"一-概念编程语言类型\"><a class=\"markdownIt-Anchor\" href=\"#一-概念编程语言类型\">#</a> 一、概念：编程语言类型</h4>\n<ul>\n<li>\n<p>动态类型语言</p>\n<p>在运行期间才会去做数据类型检查。不用指定变量类型。</p>\n</li>\n<li>\n<p>静态类型语言</p>\n<p>在编译时进行数据类型检查。</p>\n</li>\n</ul>\n<h4 id=\"为什么使用typescript\"><a class=\"markdownIt-Anchor\" href=\"#为什么使用typescript\">#</a> 为什么使用 TypeScript？</h4>\n<ol>\n<li>\n<p>程序更容易理解</p>\n<blockquote>\n<p>问题：函数或者方法输入输出的参数类型，外部条件等。</p>\n<p>动态语言的约束：需要手动调试等过程。</p>\n</blockquote>\n</li>\n<li>\n<p>效率更高</p>\n<blockquote>\n<p>在不同代码块和定义中进行跳转。</p>\n<p>代码自动补全</p>\n<p>丰富的接口提示</p>\n</blockquote>\n</li>\n<li>\n<p>更少的错误</p>\n<blockquote>\n<p>编译期间能够发现大部分错误</p>\n<p>杜绝一些比较常见的错误  例如 传入 0，布尔值判断为 false</p>\n</blockquote>\n</li>\n<li>\n<p>非常好的包容性</p>\n<blockquote>\n<p>完全兼容 JavaScript</p>\n<p>第三方库可以单独编写类型文件</p>\n<p>流行项目都支持 TypeScript - React，Vue，Ant Design</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"typescript安装\"><a class=\"markdownIt-Anchor\" href=\"#typescript安装\">#</a> TypeScript 安装</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br><span class=\"line\">tsc greeter.ts</span><br><span class=\"line\">tsc -w greeter.ts</span><br><span class=\"line\">npm install -g ts-node</span><br><span class=\"line\">ts-node greeter.ts</span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript数据类型和数据结构\"><a class=\"markdownIt-Anchor\" href=\"#javascript数据类型和数据结构\">#</a> JavaScript 数据类型和数据结构</h4>\n<p>7 种原始类型：Boolean，Null，Undefined，Number，BigInt，String，Symbol<br>\n 对象类型：Object</p>\n<h4 id=\"ts基础类型\"><a class=\"markdownIt-Anchor\" href=\"#ts基础类型\">#</a> TS 基础类型</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basic-types.ts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> isDone: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryNumber: number = <span class=\"number\">0b1111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstName: string = <span class=\"string\">&#x27;zc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> message: string = <span class=\"string\">`hello, <span class=\"subst\">$&#123;firstName&#125;</span>, age is <span class=\"subst\">$&#123;age&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> u: <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n: <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> numu: number = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numn: number = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> notSure: any = <span class=\"number\">4</span>; <span class=\"comment\">// 没有任何方法提示</span></span><br><span class=\"line\">notSure = <span class=\"string\">&#x27;string&#x27;</span>;</span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>;</span><br><span class=\"line\">notSure.name;  <span class=\"comment\">//返回类型也为 any</span></span><br><span class=\"line\">notSure.getName()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOrstring: number | string = <span class=\"number\">123</span>;</span><br><span class=\"line\">numberOrstring = <span class=\"string\">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrOfNumbers: number[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arrOfNumbers.push(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 类数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>); <span class=\"comment\">//IArguments</span></span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">  <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// arguments.forEach(); // 类型“IArguments”上不存在属性“forEach”</span></span><br><span class=\"line\">  <span class=\"comment\">// let arr: any[] = arguments;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 元组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> user: [string, number] = [<span class=\"string\">&#x27;zc&#x27;</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">user = [<span class=\"string\">&#x27;ZC&#x27;</span>, <span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"interface-接口\"><a class=\"markdownIt-Anchor\" href=\"#interface-接口\">#</a> Interface 接口</h4>\n<ul>\n<li>对对象的形状（shape）进行描述</li>\n<li>对类（class）进行抽象</li>\n<li>Duck Typing（鸭子类型）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IPerson &#123;</span><br><span class=\"line\">  readonly id: number;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">  gender?: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person: IPerson = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zc&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>readonly 是用在属性上，const 是用在变量上</p>\n</blockquote>\n<h4 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: number, y: number = <span class=\"number\">10</span>, z?: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2.函数表达式</span></span><br><span class=\"line\"><span class=\"comment\">// 类型推断 (x: number, y?: number, z?: number) =&gt; number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x: number, y: number = <span class=\"number\">10</span>, z?: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> z === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// let add2: number = add1;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2: <span class=\"function\">(<span class=\"params\">x: number, y?: number, z?: number</span>) =&gt;</span> number = add1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// str = 123;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"类-class\"><a class=\"markdownIt-Anchor\" href=\"#类-class\">#</a> 类 Class</h4>\n<ul>\n<li>类：定义了一切事物的抽象特点</li>\n<li>对象（Object）：类的实例</li>\n<li>面向对象三大特性：封装，继承，多态</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修饰符 public private protected</span></span><br><span class=\"line\"><span class=\"comment\">// static </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  public name: string;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> categories: string[] = [<span class=\"string\">&#x27;mammal&#x27;</span>, <span class=\"string\">&#x27;bird&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">isAnimal</span>(<span class=\"params\">a</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"keyword\">instanceof</span> Animal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name: string</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> is running`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> snack = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&#x27;zc&#x27;</span>);</span><br><span class=\"line\">snack.run();</span><br><span class=\"line\">snack.name = <span class=\"string\">&#x27;zczc&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Animal.isAnimal(snack))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bark</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> is barking`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&#x27;zc&#x27;</span>);</span><br><span class=\"line\">dog.run();</span><br><span class=\"line\">dog.bark();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`miao, <span class=\"subst\">$&#123;<span class=\"built_in\">super</span>.run()&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&#x27;zc&#x27;</span>);</span><br><span class=\"line\">cat.run()</span><br></pre></td></tr></table></figure>\n<h4 id=\"类和接口-implements\"><a class=\"markdownIt-Anchor\" href=\"#类和接口-implements\">#</a> 类和接口 implements</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IRadio &#123;</span><br><span class=\"line\">  switchRadio(triggerL?: boolean): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface IRadioWithBattery <span class=\"keyword\">extends</span> IRadio&#123;</span><br><span class=\"line\">  checkBatteryStatus()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"title\">implements</span> <span class=\"title\">IRadio</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">switchRadio</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CellPhone</span> <span class=\"title\">implements</span> <span class=\"title\">IRadioWithBattery</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">switchRadio</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">checkBatteryStatus</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 枚举  常量枚举</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> enum Direction &#123;</span><br><span class=\"line\">  Up = <span class=\"string\">&#x27;UP&#x27;</span>,</span><br><span class=\"line\">  Down = <span class=\"string\">&#x27;DOWN&#x27;</span>,</span><br><span class=\"line\">  Left = <span class=\"string\">&#x27;LEFT&#x27;</span>,</span><br><span class=\"line\">  Right = <span class=\"string\">&#x27;RIGHT&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction.Up)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Direction[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基础类型\n<ul>\n<li>boolean, number, string, number[], Array<number>, 元组 Tuple [string, number], enum Color {Red, Green, Blue}, any, null, undefined<br>\n 联合类型 number｜string</li>\n</ul>\n</li>\n<li>复杂类型</li>\n<li>接口 - Interface</li>\n<li>对对象的形状进行描述</li>\n<li>对类进行抽象</li>\n<li>Duck Typing</li>\n<li>类 - Class</li>\n<li>泛型 - Generics</li>\n<li>约束泛型 extends</li>\n<li>声明文件<br>\n类型别名 type<br>\n 类型断言 as</li>\n</ul>\n<h2 id=\"react\"><a class=\"markdownIt-Anchor\" href=\"#react\">#</a> React</h2>\n<ul>\n<li>useState</li>\n<li>useEffect</li>\n<li>自定义 Hook</li>\n<li>useRef</li>\n<li>useContext</li>\n</ul>\n<h2 id=\"组件测试\"><a class=\"markdownIt-Anchor\" href=\"#组件测试\">#</a> 组件测试</h2>\n<ul>\n<li>jest</li>\n<li>react-testing-libirary</li>\n<li>基础断言</li>\n<li>行为模拟</li>\n<li>mock 模拟</li>\n<li>mock 实现</li>\n</ul>\n<h2 id=\"项目启动\"><a class=\"markdownIt-Anchor\" href=\"#项目启动\">#</a> 项目启动</h2>\n<p>npx create-react-app zc-design --typescript</p>\n<p>npx：避免全局安装模块，调用项目内部安装的模块</p>\n<h2 id=\"新版-create-react-app-添加less环境配置\"><a class=\"markdownIt-Anchor\" href=\"#新版-create-react-app-添加less环境配置\">#</a> 新版 create-react-app 添加 less 环境配置</h2>\n<ol>\n<li>安装 less</li>\n</ol>\n<p>npm install less-loader less --save-dev<br>\n2. 查找 node_modules 下面的 react-scripts/config/webpack.config.js</p>\n<p>默认已经帮你配置了 sass 环境 (只要安装 sass 环境 npm install sass-loader node-sass --save-dev)</p>\n<p>const lessRegex = /.less/;\nconst lessModuleRegex = /\\.module\\.less/;</p>\n<h2 id=\"react-ts\"><a class=\"markdownIt-Anchor\" href=\"#react-ts\">#</a> react + ts</h2>\n<ul>\n<li>React.FunctionComponent&lt;P = {}&gt;</li>\n</ul>\n<h2 id=\"组件测试-2\"><a class=\"markdownIt-Anchor\" href=\"#组件测试-2\">#</a> 组件测试</h2>\n<p>测试的重要性：</p>\n<ul>\n<li>高质量的代码</li>\n<li>更早的发现 bug，减少成本</li>\n<li>让重构和升级变得更加容易和可靠</li>\n<li>让你的开发流程更加敏捷</li>\n</ul>\n<p>jest</p>\n",
            "tags": []
        },
        {
            "id": "https://zhangcong1.github.io/web/mac/vue3%E5%9F%BA%E7%A1%80/",
            "url": "https://zhangcong1.github.io/web/mac/vue3%E5%9F%BA%E7%A1%80/",
            "title": "Mac 操作相关",
            "date_published": "2021-07-31T03:22:50.439Z",
            "content_html": "<h2 id=\"mac操作相关\"><a class=\"markdownIt-Anchor\" href=\"#mac操作相关\">#</a> Mac 操作相关</h2>\n<h3 id=\"mac-777权限\"><a class=\"markdownIt-Anchor\" href=\"#mac-777权限\">#</a> Mac 777 权限</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod -R 777 你的文件夹名</span><br></pre></td></tr></table></figure>\n<h2 id=\"ssl-error-cert_untrusted\"><a class=\"markdownIt-Anchor\" href=\"#ssl-error-cert_untrusted\">#</a> SSL Error: CERT_UNTRUSTED</h2>\n<p>这个是因为 HTTPS 的设置问题，可以有两种办法解决：</p>\n<ul>\n<li>关掉 SSL 检测<br>\n <code>npm config set strict-ssl false</code></li>\n<li>使用 HTTP 连接的安装源<br>\n <code>npm config set registry=&quot;http://registry.npm.taobao.org&quot;</code></li>\n</ul>\n<p>生成 SSH 公钥  <code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code></p>\n<p>mac 终端执行如下两条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Mac"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/Vue/ant-design-vue/",
            "url": "https://zhangcong1.github.io/web/Vue/ant-design-vue/",
            "title": "ant-design-vue组件库",
            "date_published": "2021-07-31T03:11:27.476Z",
            "content_html": "<h2 id=\"antdvue\"><a class=\"markdownIt-Anchor\" href=\"#antdvue\">#</a> antdVue</h2>\n<h3 id=\"github拉取176版本源码\"><a class=\"markdownIt-Anchor\" href=\"#github拉取176版本源码\">#</a> github 拉取 1.7.6 版本源码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b <span class=\"number\">1.7</span><span class=\"number\">.6</span> https:<span class=\"comment\">//github.com/zhangcong1/ant-design-vue.git</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/JavaScript/ES6%E7%AC%94%E8%AE%B0/",
            "url": "https://zhangcong1.github.io/web/JavaScript/ES6%E7%AC%94%E8%AE%B0/",
            "title": "ES6笔记",
            "date_published": "2021-07-19T03:24:38.366Z",
            "content_html": "<h2 id=\"let和const命令\"><a class=\"markdownIt-Anchor\" href=\"#let和const命令\">#</a> let 和 const 命令</h2>\n<h3 id=\"let命令\"><a class=\"markdownIt-Anchor\" href=\"#let命令\">#</a> let 命令</h3>\n<pre><code>- 不存在变量提升（变量先声明后使用）\n- 暂时性死区（块级作用域）\n- 不允许重复声明\n</code></pre>\n<h3 id=\"const命令\"><a class=\"markdownIt-Anchor\" href=\"#const命令\">#</a> const 命令</h3>\n<blockquote>\n<p>声明只读常量，一旦声明就必须立即初始化<br>\n对于复合类型（对象，数组，函数）的变量指向数据所在地址</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">&quot;hello&quot;</span>); <span class=\"comment\">//可执行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">//可执行</span></span><br><span class=\"line\">a = [<span class=\"string\">&quot;world&quot;</span>]    <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"comment\">//对象冻结 Object.freeze</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> constantize = <span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">&#x27;object&#x27;</span>)&#123;</span><br><span class=\"line\">      constantize(obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h2>\n<h3 id=\"数组的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#数组的解构赋值\">#</a> 数组的解构赋值</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n<p>注意：ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于  <code>undefined</code> ，默认值不会生效。 null 不严格等于 undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;aaa&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> [y = f()] = [<span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n<p>如果默认值是一个表达式，那么这个表达式是 <strong>惰性求值</strong>，即只有在用到时才会求值</p>\n<h3 id=\"对象的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#对象的解构赋值\">#</a> 对象的解构赋值</h3>\n<p>数组的元素是按次序排列的。对象的属性没有次序，变量必须与属性同名。</p>\n<h3 id=\"字符串的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#字符串的解构赋值\">#</a> 字符串的解构赋值</h3>\n<h3 id=\"数值和布尔值的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#数值和布尔值的解构赋值\">#</a> 数值和布尔值的解构赋值</h3>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于 undefined 和 null 无法转为对象。所以对他们进行解构赋值，都会报错。</p>\n<h3 id=\"函数参数的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#函数参数的解构赋值\">#</a> 函数参数的解构赋值</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123;x:<span class=\"number\">0</span>, y:<span class=\"number\">0</span>&#125;</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x,y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>:<span class=\"number\">3</span>, <span class=\"attr\">y</span>:<span class=\"number\">8</span>&#125;)  <span class=\"comment\">// [3,8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>:<span class=\"number\">3</span>&#125;) <span class=\"comment\">// [3,undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined,undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0,0]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"用途\"><a class=\"markdownIt-Anchor\" href=\"#用途\">#</a> 用途</h3>\n<ul>\n<li>交换变量的值<br>\n <code>[x, y] = [y, x]</code></li>\n<li>从函数返回多个值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数参数的定义</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x,y,z&#125;</span>)</span>&#123;&#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>,<span class=\"attr\">y</span>: <span class=\"number\">2</span>,<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>提取 JSON 数据</li>\n<li>函数参数的默认值</li>\n<li>遍历 Map 解构</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">&#x27;second&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">&quot; is &quot;</span> + value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入模块的指定方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串的扩展\"><a class=\"markdownIt-Anchor\" href=\"#字符串的扩展\">#</a> 字符串的扩展</h2>\n<h3 id=\"字符的unicode表示法\"><a class=\"markdownIt-Anchor\" href=\"#字符的unicode表示法\">#</a> 字符的 Unicode 表示法</h3>\n<h3 id=\"codepointat\"><a class=\"markdownIt-Anchor\" href=\"#codepointat\">#</a> codePointAt()</h3>\n<p>能正确处理 4 个字节存储的字符，返回一个字符的码点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is32Bit</span>(<span class=\"params\">c</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.codePointAt(<span class=\"number\">0</span>) &gt; <span class=\"number\">0xFFFF</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">is32Bit(<span class=\"string\">&quot;𠮷&quot;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">is32Bit(<span class=\"string\">&quot;a&quot;</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"stringfromcodepoint\"><a class=\"markdownIt-Anchor\" href=\"#stringfromcodepoint\">#</a> String.fromCodePoint()</h3>\n<p>ES5 提供 <code>String.fromCharCode</code>  方法，用于从码点返回对应字符，但这个方法不能识别 32 位的 UTF-16 字符（Unicode 编号大于 0xFFFF）<br>\n注意： <code>fromCodePoint</code>  定义在 String 对象上，而   <code>codePointAt</code>  定义在字符串的实例对象上</p>\n<h3 id=\"字符串的遍历器接口\"><a class=\"markdownIt-Anchor\" href=\"#字符串的遍历器接口\">#</a> 字符串的遍历器接口</h3>\n<p><code>for...of</code></p>\n<h3 id=\"at\"><a class=\"markdownIt-Anchor\" href=\"#at\">#</a> at()</h3>\n<p><code>charAt()</code></p>\n<h3 id=\"includes-startswith-endswith\"><a class=\"markdownIt-Anchor\" href=\"#includes-startswith-endswith\">#</a> includes(), startsWith(), endsWith()</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &#x27;Hello World!&#x27;</span><br><span class=\"line\">s.startsWith(&#x27;world&#x27;, 6); // true</span><br><span class=\"line\">s.endsWith(&#x27;Hello&#x27;, 5);   // true</span><br><span class=\"line\">s.includes(&#x27;Hello&#x27;, 6)    // false</span><br></pre></td></tr></table></figure>\n<h3 id=\"repeatn\"><a class=\"markdownIt-Anchor\" href=\"#repeatn\">#</a> repeat(n)</h3>\n<h3 id=\"padstart-padend-字符串的补全\"><a class=\"markdownIt-Anchor\" href=\"#padstart-padend-字符串的补全\">#</a> padStart (), padEnd () 字符串的补全</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1234&#x27;</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"comment\">// 0000001234</span></span><br><span class=\"line\"><span class=\"string\">&#x27;09-12&#x27;</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">&#x27;YYYY-MM-DD&#x27;</span>) <span class=\"comment\">//YYYY-09-12</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h3>\n<h2 id=\"正则的扩展\"><a class=\"markdownIt-Anchor\" href=\"#正则的扩展\">#</a> 正则的扩展</h2>\n<h3 id=\"regexp构造函数\"><a class=\"markdownIt-Anchor\" href=\"#regexp构造函数\">#</a> RegExp 构造函数</h3>\n<p>ES6 支持第一个参数是正则表达式，第二个参数指定修饰符<br>\n <code>new RegExp(/abc/ig, 'i')</code></p>\n<h3 id=\"字符串的正则方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串的正则方法\">#</a> 字符串的正则方法</h3>\n<p>字符串对象共有 4 个方法可以使用正则表达式： <code>match(),replace(),search(),split()</code></p>\n<h2 id=\"数值的扩展\"><a class=\"markdownIt-Anchor\" href=\"#数值的扩展\">#</a> 数值的扩展</h2>\n<h3 id=\"二进制和八进制表示法\"><a class=\"markdownIt-Anchor\" href=\"#二进制和八进制表示法\">#</a> 二进制和八进制表示法</h3>\n<p>二进制：0b（0B）八进制：0o（0O）转为十进制（Number (‘0b111’)）</p>\n<h3 id=\"numberisfinite-numberisnan-numberisinteger\"><a class=\"markdownIt-Anchor\" href=\"#numberisfinite-numberisnan-numberisinteger\">#</a> Number.isFinite(), Number.isNaN(), Number.isInteger(),</h3>\n<h3 id=\"math对象的扩展\"><a class=\"markdownIt-Anchor\" href=\"#math对象的扩展\">#</a> Math 对象的扩展</h3>\n<ul>\n<li>Math.trunc ()  去除一个数的小数部分，返回整数部分</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.trunc = math.trunc || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(x) : <span class=\"built_in\">Math</span>.floor(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Math.sign ()  判断一个数到底是正数，负数，还是零<br>\n正数返回 +1；负数返回 - 1；0 返回 0；-0 返回 0；其他值返回 NaN</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.sign = <span class=\"built_in\">Math</span>.sign || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  x = +x;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === <span class=\"number\">0</span> || <span class=\"built_in\">isNaN</span>(x))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"指数运算符\"><a class=\"markdownIt-Anchor\" href=\"#指数运算符\">#</a> 指数运算符</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">a **= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组的扩展\"><a class=\"markdownIt-Anchor\" href=\"#数组的扩展\">#</a> 数组的扩展</h2>\n<h3 id=\"arrayfrom\"><a class=\"markdownIt-Anchor\" href=\"#arrayfrom\">#</a> Array.from()</h3>\n<p>Array.from 方法用于将两类对象转为真正的数组：类似数组的对象和可遍历对象（Set 和 Map）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array.prototype.slice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> toArray = (<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from ? <span class=\"built_in\">Array</span>.from : <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> [].slice.call(obj)</span><br><span class=\"line\">)();</span><br></pre></td></tr></table></figure>\n<p>Array.from 还可以接受第二个参数，作用类似于 <code>map</code>  方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取出一组DOM节点的文本内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;span.name&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// map()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.textContent);</span><br><span class=\"line\"><span class=\"comment\">// Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.textContent)</span><br></pre></td></tr></table></figure>\n<p>将数组中布尔值为 false 的成员转为 0</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,,<span class=\"number\">2</span>,,<span class=\"number\">3</span>], <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n || <span class=\"number\">0</span>)  <span class=\"comment\">// [1,0,2,0,3]</span></span><br></pre></td></tr></table></figure>\n<p>返回各种数据的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typesOf</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"keyword\">typeof</span> value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">typesOf(<span class=\"literal\">null</span>, [], <span class=\"literal\">NaN</span>)  <span class=\"comment\">// [&#x27;object&#x27;, &#x27;object&#x27;, &#x27;number&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p>Array.from 的第三个参数用来绑定 this。<br>\nArray.from () 可以将各种值转为真正的数组，并且还提供了 map 功能。另一个应用是将字符串转为数组，然后返回长度，解决 JavaScript 将大于 \\uFFFF 的 unicode 字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: <span class=\"number\">2</span> &#125;, <span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;jack&#x27;</span>);  <span class=\"comment\">// [&#x27;jack&#x27;,&#x27;jack&#x27;]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countSymbols</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(string).length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"arrayof\"><a class=\"markdownIt-Anchor\" href=\"#arrayof\">#</a> Array.of()</h3>\n<p>Array.of 方法用于将一组值转换为数组。弥补了 Array () 方法只传一个参数是指定数组的长度。</p>\n<h3 id=\"数组实例的copywithin\"><a class=\"markdownIt-Anchor\" href=\"#数组实例的copywithin\">#</a> 数组实例的 copyWithin ()</h3>\n<p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改原数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin(target, start = <span class=\"number\">0</span>, end = <span class=\"built_in\">this</span>.length)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组实例的find和findindex\"><a class=\"markdownIt-Anchor\" href=\"#数组实例的find和findindex\">#</a> 数组实例的 find () 和 findIndex ()</h3>\n<p>数组实例的 find 方法，用于找出第一个符合条件的数组成员。<br>\n参数是一个回调函数，找出第一个返回值为 <code>true</code>  的成员，然后返回该成员，如果没有符合条件的成员，则返回  <code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span></span><br><span class=\"line\">&#125;)  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>findIndex () 返回第一个符合条件的数组成员的位置，没有返回 <strong>-1</strong>。可以发现 NaN.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>)  <span class=\"comment\">// -1</span></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].findIndex(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组实例的fill\"><a class=\"markdownIt-Anchor\" href=\"#数组实例的fill\">#</a> 数组实例的 fill ()</h3>\n<p>fill 方法使用给定值，填充一个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>].fill(<span class=\"number\">7</span>)  <span class=\"comment\">// [7,7,7]</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>)   <span class=\"comment\">// [7,7,7]</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>].fill(<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">// [&#x27;a&#x27;,7,&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p>用于空数组的初始化非常方便。</p>\n<h3 id=\"数组实例的entries-keys-和-values\"><a class=\"markdownIt-Anchor\" href=\"#数组实例的entries-keys-和-values\">#</a> 数组实例的 entries (), keys () 和 values ()</h3>\n<p>都返回一个遍历器对象，可以用  <code>for...of</code>  进行遍历</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index)  <span class=\"comment\">// 0  1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>].values())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem)   <span class=\"comment\">// &#x27;a&#x27;  &#x27;b&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [index,elem] <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>].entries())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);  <span class=\"comment\">// 0 &quot;a&quot;     1 &quot;b&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不使用 for…of 循环，可以手动调用遍历器对象的 next () 方法进行遍历。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letter = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> entries = letter.entries()</span><br><span class=\"line\">entries.next().value  <span class=\"comment\">// [0, &#x27;a&#x27;]</span></span><br><span class=\"line\">entries.next().value  <span class=\"comment\">// [1, &#x27;b&#x27;]</span></span><br><span class=\"line\">entries.next().value  <span class=\"comment\">// [2, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组实例的includes\"><a class=\"markdownIt-Anchor\" href=\"#数组实例的includes\">#</a> 数组实例的 includes ()</h3>\n<p>Array.prototype.includes 方法返回一个布尔值。<br>\n第二个参数表示搜索的起始位置，默认 0，负数表示倒数位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contains = (<span class=\"function\">() =&gt;</span> </span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.includes</span><br><span class=\"line\">    ? <span class=\"function\">(<span class=\"params\">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class=\"line\">    : <span class=\"function\">(<span class=\"params\">arr, value</span>) =&gt;</span> arr.some(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === value)</span><br><span class=\"line\">)();</span><br><span class=\"line\">contains([<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>], <span class=\"string\">&quot;baz&quot;</span>)  <span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外，Map 和 Set 数据结构有一个 has 方法，需要注意与 includes 区分。</p>\n<blockquote>\n<p>Map 结构的 has 方法，是用来查找键名的，比如  <code>Map.prototype.has(key) WeakMap.prototype.has(key) Reflect.has(target, propertyKey)</code> <br>\n Set 结构的 has 方法，是用来查找值的，比如 <code>Set.prototype.has(value) WeakSet.prototype.has(value)</code></p>\n</blockquote>\n</blockquote>\n<h3 id=\"数组的空位\"><a class=\"markdownIt-Anchor\" href=\"#数组的空位\">#</a> 数组的空位</h3>\n<h2 id=\"函数的扩展\"><a class=\"markdownIt-Anchor\" href=\"#函数的扩展\">#</a> 函数的扩展</h2>\n<h3 id=\"函数参数的默认值\"><a class=\"markdownIt-Anchor\" href=\"#函数参数的默认值\">#</a> 函数参数的默认值</h3>\n<h3 id=\"与解构赋值默认值结合使用\"><a class=\"markdownIt-Anchor\" href=\"#与解构赋值默认值结合使用\">#</a> 与解构赋值默认值结合使用</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetch</span>(<span class=\"params\">url, &#123; method = <span class=\"string\">&quot;GET&quot;</span> &#125; = &#123;&#125;</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(method)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fetch(<span class=\"string\">&quot;http://example.com&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// &quot;GET&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h3>\n<ul>\n<li>利用参数默认值，可以指定某一个参数不得省略，如果省略就会抛出一个错误</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwIfMissing</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Missing parameter&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">mustBeProvided = throwIfMissing()</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mustBeProvided</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"comment\">// Error: Missing parameter</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>rest 参数<br>\n注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则报错</li>\n<li>扩展运算符</li>\n<li>代替数组的 apply 方法</li>\n<li>扩展运算符的应用\n<ul>\n<li>合并数组</li>\n<li>与解构赋值结合</li>\n<li>函数的返回值</li>\n<li>字符串</li>\n<li>实现了 Iterator 接口的对象</li>\n<li>Map 和 Set 结构，Generator 函数</li>\n</ul>\n</li>\n<li>箭头函数</li>\n</ul>\n<blockquote>\n<p>使用注意点<br>\n（1）函数体内的 this 对象，就是定义时所在的对象，而不是使用是所在的对象<br>\n（2）不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误<br>\n（3）不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 Rest 参数代替<br>\n（4）不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.s1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.s2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.s1++, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  setinterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.s2++</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;s1: &#x27;</span>, timer.s1), <span class=\"number\">3100</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;s2: &#x27;</span>, timer.s2), <span class=\"number\">3100</span>);</span><br><span class=\"line\"><span class=\"comment\">// s1: 3  this指向Timer函数</span></span><br><span class=\"line\"><span class=\"comment\">// s2: 0  this指向全局对象</span></span><br></pre></td></tr></table></figure>\n<p>箭头函数里没有自己的 this，而是引用外层的 this，当然也就不能用 call (), apply (), bind () 这些方法去改变 this 的指向 。除了 this，指向外层函数的对应变量：arguments，super，new.target。</p>\n<h2 id=\"对象的扩展\"><a class=\"markdownIt-Anchor\" href=\"#对象的扩展\">#</a> 对象的扩展</h2>\n<h3 id=\"属性的简洁表示法\"><a class=\"markdownIt-Anchor\" href=\"#属性的简洁表示法\">#</a> 属性的简洁表示法</h3>\n<h3 id=\"属性名表达式\"><a class=\"markdownIt-Anchor\" href=\"#属性名表达式\">#</a> 属性名表达式</h3>\n<h3 id=\"方法的name属性\"><a class=\"markdownIt-Anchor\" href=\"#方法的name属性\">#</a> 方法的 name 属性</h3>\n<h3 id=\"objectis\"><a class=\"markdownIt-Anchor\" href=\"#objectis\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span>()</h3>\n<p>ES5 比较两个值是否相等，只有两个运算符：<mark>和</mark> =。他们都有缺点，前者会自动转换数据类型，后者的 NaN 不等于自身，以及 + 0 等于 - 0.<br>\nObject.is 就是用来比较两个值是否严格相等</p>\n",
            "tags": [
                "JavaScript",
                "ES6"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/JavaScript/JavaScript/",
            "url": "https://zhangcong1.github.io/web/JavaScript/JavaScript/",
            "title": "JavaScript",
            "date_published": "2021-07-18T11:24:59.307Z",
            "content_html": "",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/React/React/",
            "url": "https://zhangcong1.github.io/web/React/React/",
            "title": "React笔记",
            "date_published": "2021-07-18T11:24:12.434Z",
            "content_html": "<p>yarn create react-app my-app --template typescript</p>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/React/umi/",
            "url": "https://zhangcong1.github.io/web/React/umi/",
            "title": "React笔记",
            "date_published": "2021-07-18T11:24:12.434Z",
            "content_html": "<h2 id=\"使用-umijs-搭建-react项目\"><a class=\"markdownIt-Anchor\" href=\"#使用-umijs-搭建-react项目\">#</a> 使用 UmiJs 搭建 React 项目</h2>\n<p>UmiJs 是一个可插拔的企业级 react 应用框架，集成 react，react-router，ant-design 等项目中常用的依赖包，可通过脚手架快速生成项目。</p>\n<h3 id=\"umijs-特点\"><a class=\"markdownIt-Anchor\" href=\"#umijs-特点\">#</a> UmiJs 特点</h3>\n<ul>\n<li>可扩展</li>\n<li>开箱即用 s</li>\n<li>企业级</li>\n<li>大量自研</li>\n<li>完备路由</li>\n<li>最新框架</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UmiJs2</span><br><span class=\"line\">yarn create umi</span><br><span class=\"line\">UmiJs3</span><br><span class=\"line\">yarn create @umijs/umi-app</span><br></pre></td></tr></table></figure>\n<p>.umirc.ts 文件：路由配置，插件配置<br>\n自动创建 page 及路由，动态路由 $id.js  [id].js</p>\n<p>![截屏 2021-11-19 22.34.01](/Users/zhangcong/Desktop/ 我的项目 / 博客 /hexo/source/_posts/web/React/UmiJs/ 截屏 2021-11-19 22.34.01.png)</p>\n<p>![截屏 2021-11-19 22.43.29](/Users/zhangcong/Desktop/ 我的项目 / 博客 /hexo/source/_posts/web/React/UmiJs/ 截屏 2021-11-19 22.43.29.png)</p>\n<h2 id=\"dva\"><a class=\"markdownIt-Anchor\" href=\"#dva\">#</a> Dva</h2>\n<p>models 文件夹<br>\n state  reducers 同步  effects 异步</p>\n<h2 id=\"react-hooks\"><a class=\"markdownIt-Anchor\" href=\"#react-hooks\">#</a> React Hooks</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(()=&gt;&#123;&#125;, 可选值)</span><br><span class=\"line\">// 不传，每次都会触发</span><br><span class=\"line\">// 传 [] ,只会初始化执行一次</span><br><span class=\"line\">// 传 [value] , value值改变触发</span><br><span class=\"line\">useLayoutEffect  所有dom渲染完成后才同步执行effect，通常用来做dom相关操作</span><br><span class=\"line\">useMemo 缓存 只要state不改变就不会重新渲染</span><br><span class=\"line\">useCallback 函数缓存</span><br><span class=\"line\"></span><br><span class=\"line\">useContext</span><br><span class=\"line\">useReducer</span><br></pre></td></tr></table></figure>",
            "tags": [
                "React"
            ]
        },
        {
            "id": "https://zhangcong1.github.io/web/Vue/Vue/",
            "url": "https://zhangcong1.github.io/web/Vue/Vue/",
            "title": "Vue笔记",
            "date_published": "2021-07-18T11:15:46.829Z",
            "content_html": "",
            "tags": [
                "Vue"
            ]
        }
    ]
}