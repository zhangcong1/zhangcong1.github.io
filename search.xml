<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue笔记</title>
    <url>/web/Vue/Vue/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>React笔记</title>
    <url>/web/React/React/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/web/JavaScript/JavaScript/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6笔记</title>
    <url>/web/JavaScript/ES6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="let和const命令"><a class="markdownIt-Anchor" href="#let和const命令">#</a> let 和 const 命令</h2>
<h3 id="let命令"><a class="markdownIt-Anchor" href="#let命令">#</a> let 命令</h3>
<pre><code>- 不存在变量提升（变量先声明后使用）
- 暂时性死区（块级作用域）
- 不允许重复声明
</code></pre>
<h3 id="const命令"><a class="markdownIt-Anchor" href="#const命令">#</a> const 命令</h3>
<blockquote>
<p>声明只读常量，一旦声明就必须立即初始化<br>
对于复合类型（对象，数组，函数）的变量指向数据所在地址</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.push(<span class="string">&quot;hello&quot;</span>); <span class="comment">//可执行</span></span><br><span class="line">a.length = <span class="number">0</span>;    <span class="comment">//可执行</span></span><br><span class="line">a = [<span class="string">&quot;world&quot;</span>]    <span class="comment">//报错</span></span><br><span class="line"><span class="comment">//对象冻结 Object.freeze</span></span><br><span class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">      constantize(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量的解构赋值"><a class="markdownIt-Anchor" href="#变量的解构赋值">#</a> 变量的解构赋值</h2>
<h3 id="数组的解构赋值"><a class="markdownIt-Anchor" href="#数组的解构赋值">#</a> 数组的解构赋值</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>]</span><br><span class="line">x <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>]</span><br><span class="line">x <span class="comment">//null</span></span><br></pre></td></tr></table></figure>
<p>注意：ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于  <code>undefined</code> ，默认值不会生效。 null 不严格等于 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> [y = f()] = [<span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure>
<p>如果默认值是一个表达式，那么这个表达式是 <strong>惰性求值</strong>，即只有在用到时才会求值</p>
<h3 id="对象的解构赋值"><a class="markdownIt-Anchor" href="#对象的解构赋值">#</a> 对象的解构赋值</h3>
<p>数组的元素是按次序排列的。对象的属性没有次序，变量必须与属性同名。</p>
<h3 id="字符串的解构赋值"><a class="markdownIt-Anchor" href="#字符串的解构赋值">#</a> 字符串的解构赋值</h3>
<h3 id="数值和布尔值的解构赋值"><a class="markdownIt-Anchor" href="#数值和布尔值的解构赋值">#</a> 数值和布尔值的解构赋值</h3>
<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于 undefined 和 null 无法转为对象。所以对他们进行解构赋值，都会报错。</p>
<h3 id="函数参数的解构赋值"><a class="markdownIt-Anchor" href="#函数参数的解构赋值">#</a> 函数参数的解构赋值</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123;x:<span class="number">0</span>, y:<span class="number">0</span>&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x,y]</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;<span class="attr">x</span>:<span class="number">3</span>, <span class="attr">y</span>:<span class="number">8</span>&#125;)  <span class="comment">// [3,8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;) <span class="comment">// [3,undefined]</span></span><br><span class="line">move(&#123;&#125;) <span class="comment">// [undefined,undefined]</span></span><br><span class="line">move() <span class="comment">// [0,0]</span></span><br></pre></td></tr></table></figure>
<h3 id="用途"><a class="markdownIt-Anchor" href="#用途">#</a> 用途</h3>
<ul>
<li>交换变量的值<br>
 <code>[x, y] = [y, x]</code></li>
<li>从函数返回多个值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>
<ul>
<li>函数参数的定义</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x,y,z&#125;</span>)</span>&#123;&#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>,<span class="attr">y</span>: <span class="number">2</span>,<span class="attr">x</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>提取 JSON 数据</li>
<li>函数参数的默认值</li>
<li>遍历 Map 解构</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot; is &quot;</span> + value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>输入模块的指定方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; SourceMapConsumer, SourceNode &#125; = require(&quot;source-map&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="字符串的扩展"><a class="markdownIt-Anchor" href="#字符串的扩展">#</a> 字符串的扩展</h2>
<h3 id="字符的unicode表示法"><a class="markdownIt-Anchor" href="#字符的unicode表示法">#</a> 字符的 Unicode 表示法</h3>
<h3 id="codepointat"><a class="markdownIt-Anchor" href="#codepointat">#</a> codePointAt()</h3>
<p>能正确处理 4 个字节存储的字符，返回一个字符的码点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is32Bit</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.codePointAt(<span class="number">0</span>) &gt; <span class="number">0xFFFF</span></span><br><span class="line">&#125;</span><br><span class="line">is32Bit(<span class="string">&quot;𠮷&quot;</span>) <span class="comment">// true</span></span><br><span class="line">is32Bit(<span class="string">&quot;a&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="stringfromcodepoint"><a class="markdownIt-Anchor" href="#stringfromcodepoint">#</a> String.fromCodePoint()</h3>
<p>ES5 提供 <code>String.fromCharCode</code>  方法，用于从码点返回对应字符，但这个方法不能识别 32 位的 UTF-16 字符（Unicode 编号大于 0xFFFF）<br>
注意： <code>fromCodePoint</code>  定义在 String 对象上，而   <code>codePointAt</code>  定义在字符串的实例对象上</p>
<h3 id="字符串的遍历器接口"><a class="markdownIt-Anchor" href="#字符串的遍历器接口">#</a> 字符串的遍历器接口</h3>
<p><code>for...of</code></p>
<h3 id="at"><a class="markdownIt-Anchor" href="#at">#</a> at()</h3>
<p><code>charAt()</code></p>
<h3 id="includes-startswith-endswith"><a class="markdownIt-Anchor" href="#includes-startswith-endswith">#</a> includes(), startsWith(), endsWith()</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s = &#x27;Hello World!&#x27;</span><br><span class="line">s.startsWith(&#x27;world&#x27;, 6); // true</span><br><span class="line">s.endsWith(&#x27;Hello&#x27;, 5);   // true</span><br><span class="line">s.includes(&#x27;Hello&#x27;, 6)    // false</span><br></pre></td></tr></table></figure>
<h3 id="repeatn"><a class="markdownIt-Anchor" href="#repeatn">#</a> repeat(n)</h3>
<h3 id="padstart-padend-字符串的补全"><a class="markdownIt-Anchor" href="#padstart-padend-字符串的补全">#</a> padStart (), padEnd () 字符串的补全</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1234&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment">// 0000001234</span></span><br><span class="line"><span class="string">&#x27;09-12&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="comment">//YYYY-09-12</span></span><br></pre></td></tr></table></figure>
<h3 id="模板字符串"><a class="markdownIt-Anchor" href="#模板字符串">#</a> 模板字符串</h3>
<h2 id="正则的扩展"><a class="markdownIt-Anchor" href="#正则的扩展">#</a> 正则的扩展</h2>
<h3 id="regexp构造函数"><a class="markdownIt-Anchor" href="#regexp构造函数">#</a> RegExp 构造函数</h3>
<p>ES6 支持第一个参数是正则表达式，第二个参数指定修饰符<br>
 <code>new RegExp(/abc/ig, 'i')</code></p>
<h3 id="字符串的正则方法"><a class="markdownIt-Anchor" href="#字符串的正则方法">#</a> 字符串的正则方法</h3>
<p>字符串对象共有 4 个方法可以使用正则表达式： <code>match(),replace(),search(),split()</code></p>
<h2 id="数值的扩展"><a class="markdownIt-Anchor" href="#数值的扩展">#</a> 数值的扩展</h2>
<h3 id="二进制和八进制表示法"><a class="markdownIt-Anchor" href="#二进制和八进制表示法">#</a> 二进制和八进制表示法</h3>
<p>二进制：0b（0B）八进制：0o（0O）转为十进制（Number (‘0b111’)）</p>
<h3 id="numberisfinite-numberisnan-numberisinteger"><a class="markdownIt-Anchor" href="#numberisfinite-numberisnan-numberisinteger">#</a> Number.isFinite(), Number.isNaN(), Number.isInteger(),</h3>
<h3 id="math对象的扩展"><a class="markdownIt-Anchor" href="#math对象的扩展">#</a> Math 对象的扩展</h3>
<ul>
<li>Math.trunc ()  去除一个数的小数部分，返回整数部分</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc = math.trunc || <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(x) : <span class="built_in">Math</span>.floor(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Math.sign ()  判断一个数到底是正数，负数，还是零<br>
正数返回 +1；负数返回 - 1；0 返回 0；-0 返回 0；其他值返回 NaN</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign = <span class="built_in">Math</span>.sign || <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  x = +x;</span><br><span class="line">  <span class="keyword">if</span>(x === <span class="number">0</span> || <span class="built_in">isNaN</span>(x))&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指数运算符"><a class="markdownIt-Anchor" href="#指数运算符">#</a> 指数运算符</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">// 4</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">a **= <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="数组的扩展"><a class="markdownIt-Anchor" href="#数组的扩展">#</a> 数组的扩展</h2>
<h3 id="arrayfrom"><a class="markdownIt-Anchor" href="#arrayfrom">#</a> Array.from()</h3>
<p>Array.from 方法用于将两类对象转为真正的数组：类似数组的对象和可遍历对象（Set 和 Map）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.slice</span></span><br><span class="line"><span class="keyword">const</span> toArray = (<span class="function">() =&gt;</span> </span><br><span class="line">  <span class="built_in">Array</span>.from ? <span class="built_in">Array</span>.from : <span class="function"><span class="params">obj</span> =&gt;</span> [].slice.call(obj)</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>
<p>Array.from 还可以接受第二个参数，作用类似于 <code>map</code>  方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike, <span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出一组DOM节点的文本内容</span></span><br><span class="line"><span class="keyword">let</span> spans = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;span.name&#x27;</span>);</span><br><span class="line"><span class="comment">// map()</span></span><br><span class="line"><span class="keyword">let</span> names1 = <span class="built_in">Array</span>.prototype.map.call(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.textContent);</span><br><span class="line"><span class="comment">// Array.from()</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="built_in">Array</span>.from(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.textContent)</span><br></pre></td></tr></table></figure>
<p>将数组中布尔值为 false 的成员转为 0</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>,,<span class="number">2</span>,,<span class="number">3</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> n || <span class="number">0</span>)  <span class="comment">// [1,0,2,0,3]</span></span><br></pre></td></tr></table></figure>
<p>返回各种数据的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typesOf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>, <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">typeof</span> value)</span><br><span class="line">&#125;</span><br><span class="line">typesOf(<span class="literal">null</span>, [], <span class="literal">NaN</span>)  <span class="comment">// [&#x27;object&#x27;, &#x27;object&#x27;, &#x27;number&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>Array.from 的第三个参数用来绑定 this。<br>
Array.from () 可以将各种值转为真正的数组，并且还提供了 map 功能。另一个应用是将字符串转为数组，然后返回长度，解决 JavaScript 将大于 \uFFFF 的 unicode 字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> <span class="string">&#x27;jack&#x27;</span>);  <span class="comment">// [&#x27;jack&#x27;,&#x27;jack&#x27;]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSymbols</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(string).length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="arrayof"><a class="markdownIt-Anchor" href="#arrayof">#</a> Array.of()</h3>
<p>Array.of 方法用于将一组值转换为数组。弥补了 Array () 方法只传一个参数是指定数组的长度。</p>
<h3 id="数组实例的copywithin"><a class="markdownIt-Anchor" href="#数组实例的copywithin">#</a> 数组实例的 copyWithin ()</h3>
<p>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。会修改原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.copyWithin(target, start = <span class="number">0</span>, end = <span class="built_in">this</span>.length)</span><br></pre></td></tr></table></figure>
<h3 id="数组实例的find和findindex"><a class="markdownIt-Anchor" href="#数组实例的find和findindex">#</a> 数组实例的 find () 和 findIndex ()</h3>
<p>数组实例的 find 方法，用于找出第一个符合条件的数组成员。<br>
参数是一个回调函数，找出第一个返回值为 <code>true</code>  的成员，然后返回该成员，如果没有符合条件的成员，则返回  <code>undefined</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span></span><br><span class="line">&#125;)  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>findIndex () 返回第一个符合条件的数组成员的位置，没有返回 <strong>-1</strong>。可以发现 NaN.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)  <span class="comment">// -1</span></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h3 id="数组实例的fill"><a class="markdownIt-Anchor" href="#数组实例的fill">#</a> 数组实例的 fill ()</h3>
<p>fill 方法使用给定值，填充一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)  <span class="comment">// [7,7,7]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)   <span class="comment">// [7,7,7]</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">// [&#x27;a&#x27;,7,&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>用于空数组的初始化非常方便。</p>
<h3 id="数组实例的entries-keys-和-values"><a class="markdownIt-Anchor" href="#数组实例的entries-keys-和-values">#</a> 数组实例的 entries (), keys () 和 values ()</h3>
<p>都返回一个遍历器对象，可以用  <code>for...of</code>  进行遍历</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index)  <span class="comment">// 0  1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>].values())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem)   <span class="comment">// &#x27;a&#x27;  &#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [index,elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>].entries())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);  <span class="comment">// 0 &quot;a&quot;     1 &quot;b&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不使用 for…of 循环，可以手动调用遍历器对象的 next () 方法进行遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> entries = letter.entries()</span><br><span class="line">entries.next().value  <span class="comment">// [0, &#x27;a&#x27;]</span></span><br><span class="line">entries.next().value  <span class="comment">// [1, &#x27;b&#x27;]</span></span><br><span class="line">entries.next().value  <span class="comment">// [2, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="数组实例的includes"><a class="markdownIt-Anchor" href="#数组实例的includes">#</a> 数组实例的 includes ()</h3>
<p>Array.prototype.includes 方法返回一个布尔值。<br>
第二个参数表示搜索的起始位置，默认 0，负数表示倒数位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contains = (<span class="function">() =&gt;</span> </span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>], <span class="string">&quot;baz&quot;</span>)  <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另外，Map 和 Set 数据结构有一个 has 方法，需要注意与 includes 区分。</p>
<blockquote>
<p>Map 结构的 has 方法，是用来查找键名的，比如  <code>Map.prototype.has(key) WeakMap.prototype.has(key) Reflect.has(target, propertyKey)</code> <br>
 Set 结构的 has 方法，是用来查找值的，比如 <code>Set.prototype.has(value) WeakSet.prototype.has(value)</code></p>
</blockquote>
</blockquote>
<h3 id="数组的空位"><a class="markdownIt-Anchor" href="#数组的空位">#</a> 数组的空位</h3>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
  </entry>
</search>
